package br.com.dio.persistence.migration;


import br.com.dio.persistence.config.MySQLConnection;

import liquibase.Liquibase;
import liquibase.database.jvm.JdbcConnection;
import liquibase.exception.LiquibaseException;
import liquibase.resource.ClassLoaderResourceAccessor;
import lombok.AllArgsConstructor;


import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.SQLException;


public class MigrationStrategy {

    // Conex√£o do banco que ser√° usada para executar a migra√ß√£o
    private final Connection connection;

    public MigrationStrategy(Connection connection) {
        this.connection = connection;
    }

    // Metodo  para executar a migra√ß√£o usando Liquibase
    public void executeMigration() {

       /* ======= Quando for trabalhar com terminal criar um arquivo pra salvar os log do
          ======= Liquibase
        */

        // Salva os streams originais de sa√≠da e erro para restaurar depois
        var originalOut = System.out;
        var originalErr = System.err;

        try (var fos = new FileOutputStream("liquibase.log")) { // Abre arquivo para logar sa√≠da

            // Redireciona sa√≠da padr√£o e erro padr√£o para o arquivo de log
            System.setOut(new PrintStream(fos));
            System.setErr(new PrintStream(fos));


            /// //////////////// criar Inst√¢ncia Liquibase  ////////////////

            // Usa a conex√£o passada no construtor para criar um JdbcConnection para Liquibase
            try (var jdbcConnection = new JdbcConnection(connection)) {
                // Inicializa Liquibase apontando para o arquivo master changelog e usando o class loader
                var liquibase = new Liquibase(
                        "/db/changelog/db.changelog-master.yml",
                        new ClassLoaderResourceAccessor(),
                        jdbcConnection
                );

                // Executa a atualiza√ß√£o das mudan√ßas no banco
                liquibase.update("");
            } catch (LiquibaseException e) {
                // Caso ocorra erro, lan√ßa runtime exception para interromper a execu√ß√£o
                throw new RuntimeException(e);
            }

        } catch (IOException e) {
            // Se n√£o conseguir abrir o arquivo para log, lan√ßa runtime exception
            throw new RuntimeException(e);
        }finally {
            // üî• restaura os streams originais
            System.setOut(originalOut);
            System.setErr(originalErr);
        }
    }
}